#include "CompoundHistoUnfolding.hh"
#include "TMath.h"
#include "TROOT.h"
ClassImp(CompoundHistoUnfolding);
void CompoundHistoUnfolding::CreateTotalMCUncOLD(ResultLevelCode_t resultcode, RecoLevelCode_t recocode, bool shape)
{
  printf("void CompoundHistoUnfolding::CreateTotalMCUnc(ResultLevelCode_t resultcode %u, RecoLevelCode_t recocode %u, bool shape %s)\n", resultcode, recocode, shape ? "shape" : "noshape");

  MOCode_t mo = shape ? TOTALMCUNCSHAPE : TOTALMCUNC;
  if (not GetLevel(resultcode) -> GetHURef(mo))
    GetLevel(resultcode) -> GetHURef(mo) = new HistoUnfoldingTH1();
  TH1 *& htotalMCUnc = GetLevel(resultcode) -> GetHU(mo) -> GetTH1Ref(recocode);
  htotalMCUnc = GetLevel(resultcode) -> GetHU(TOTALMCSIGNALPROXY, resultcode) -> Project(recocode, CreateName(shape ? "totalMCUncShape" : "totalMCUnc"), "", _YaxisTitle);
  //  RejectNonReco(htotalMCUnc);
  const unsigned char nbins = htotalMCUnc -> GetNbinsX();

  /*  if (recocode == RECO and resultcode == IN)
      ApplyScaleFactor(htotalMCUnc);*/
  TH1 * hsig = GetLevel(resultcode) -> GetHU(SIGNALPROXY, resultcode) -> Project(recocode, CreateName("sig"));
  
  if (recocode == RECO and resultcode == IN)
    {
      ApplyScaleFactor(htotalMCUnc);
      ApplyScaleFactor(hsig);
    }
  const double integralnominal = hsig -> Integral();
  float sysUp[nbins + 2];
  float sysDown[nbins + 2];
  for (unsigned char ind = 0; ind < nbins + 2; ind ++)
    {
      sysUp[ind] = 0.0;
      sysDown[ind] = 0.0;
    }
  FILE * uncfile(nullptr), * uncfilefull(nullptr);
  if (not shape)
    {
      const TString uncfilenamefull = TString(_folder) + 
	"/unc_" + 
	tag_resultlevel[resultcode] + "_" + 
	tag_recolevel[recocode] + "_full.txt";
      uncfilefull = fopen(uncfilenamefull, "w");
      //      printf("%p %s\n", uncfile, uncfilename.Data());
    }
  unsigned char sys_ind = 0;
  map<TString, float> mcaterr;
  for(map<TString, vector<HistoUnfolding *>>::iterator bit = GetLevel(IN) -> _msyshistos.begin(); bit != GetLevel(IN) -> _msyshistos.end(); bit ++)
    {
      const TString sample = bit -> first;
      for (vector<HistoUnfolding *>::iterator it = GetLevel(resultcode) -> GetV(SYSMO, sample.Data()) -> begin(); it != GetLevel(resultcode) -> GetV(SYSMO, sample.Data()) -> end(); it ++)
	{
	  TH1 * hsigprox = nullptr;
	  TH1 * hsys = (*it) -> Project(recocode);
	  bool delsigprox = false;
	  if (sample == signaltag)
	    {
	      if (resultcode == OUT)
		{
		  if ((*it) -> GetSysType() == EXPSYS)
		    {
		      hsigprox = hsig;
		    }
		  else
		    {
		      hsigprox = GetSys(IN, (*it) -> GetTag(), sample.Data()) -> Project(recocode);
		      if (recocode == RECO)
			{
			  TH2 * signalmatrix = GetSys(IN, (*it) -> GetTag(), sample.Data()) -> GetTH2();
			  for (unsigned char bind = 0; bind <= hsigprox -> GetNbinsX() + 1; bind ++)
			    {
			      const float fact = signalmatrix -> GetBinContent(bind, 0) / signalmatrix -> Integral(bind, bind, 0, signalmatrix -> GetNbinsY() + 1);
			      hsigprox -> SetBinContent(bind, hsigprox -> GetBinContent(bind) * fact);
			    }
			}
		      delsigprox = true;
		    }
		}
	      else
		{
		  hsigprox = hsig;
		  
		  if (recocode == RECO)
		    {
		      ApplyScaleFactor(hsys);
		    }
		}
	    }
	  else
	    {
	      if (resultcode == IN)
		{
		  hsigprox = GetBackgroundH(sample.Data()) -> Project(recocode);
		  delsigprox = true;
		  if (recocode == RECO)
		    {
		      ApplyScaleFactor(hsys);
		      ApplyScaleFactor(hsigprox);
		    }			    ;
		}
	      else
		{
		  hsigprox = hsig;
		  
		}
	    }

	  const double integralnominal = hsigprox -> Integral();

	  if (shape)
	    {
	      const double integral = hsys -> Integral();
	      if (integral)
		hsys -> Scale(integralnominal/integral);
	  
	    }
	  for (unsigned char bin_ind = 0; bin_ind < nbins + 2; bin_ind ++)
	    {
	      const float diff = hsys -> GetBinContent(bin_ind) - hsigprox -> GetBinContent(bin_ind);
	      //	  diff *= signalmatrix -> Integral(0, signalmatrix -> GetNbinsX() + 1, bin_ind, bin_ind) / signalmatrix -> Integral(1, signalmatrix -> GetNbinsX(), bin_ind, bin_ind);
	      if (bin_ind == 1 and not shape)
		{
		  // float diffnom = hsys -> GetBinContent(bin_ind)/hsys -> Integral() - hsigprox -> GetBinContent(bin_ind)/hsigprox -> Integral();
		  // diffnom = fabs(diffnom) * hsigprox -> Integral()/hsigprox -> GetBinContent(bin_ind) * 100;
		  fprintf(uncfilefull, "%s,\t%.9f\t%.9f", (*it) -> GetTitle(), hsys -> GetBinContent(bin_ind)/hsys -> Integral(), hsigprox -> GetBinContent(bin_ind)/hsigprox -> Integral());
	   
		}
	      if (bin_ind > 1 and bin_ind < nbins + 1 and not shape)
		{
		  fprintf(uncfilefull, "\t%.9f\t%.9f", hsys -> GetBinContent(bin_ind)/hsys -> Integral(), hsigprox -> GetBinContent(bin_ind)/hsigprox -> Integral());
		}
	      if (bin_ind == nbins + 1 and not shape)
		{
		  fprintf(uncfilefull, "\n");

		}
	      if (diff > 0)
		{
		  sysUp[bin_ind] = TMath::Sqrt(TMath::Power(sysUp[bin_ind], 2) + TMath::Power(diff, 2));
		}
	      else
		{
		  sysDown[bin_ind] = TMath::Sqrt(TMath::Power(sysDown[bin_ind], 2) + TMath::Power(diff, 2));
		}
	    }
	  //printf("\n");
	  delete hsys;
	  if (delsigprox)//(*it) -> GetSysType() == THEORSYS and resultcode == OUT and TString(sample.Data()) == signaltag)
	    {
	      delete hsigprox;
	    }
	}
    }

  
  if (uncfilefull)
    {
      fclose(uncfilefull);
    }
  printf("listing unc resultcode %u recocode %u %s\n", resultcode, recocode, shape ? "shape": "noshape");
  // printf("initial");
  // htotalMCUnc -> Print("all");
  for (unsigned char bin_ind = 0; bin_ind < nbins + 2; bin_ind ++)
    {
      htotalMCUnc -> SetBinContent(bin_ind, htotalMCUnc -> GetBinContent(bin_ind) + (sysUp[bin_ind] - sysDown[bin_ind])/2.0);
            htotalMCUnc -> SetBinError(bin_ind, TMath::Sqrt(TMath::Power(htotalMCUnc -> GetBinError(bin_ind), 2) + TMath::Power((sysUp[bin_ind] + sysDown[bin_ind])/2.0, 2)));
      //      htotalMCUnc -> SetBinError(bin_ind, TMath::Sqrt(TMath::Power(htotalMCUnc -> GetBinError(bin_ind), 2) + 0.5*(TMath::Power(sysUp[bin_ind], 2) + TMath::Power(sysDown[bin_ind],2))));

    }
  delete hsig;
  //  NormaliseToBinWidth(htotalMCUnc);
  htotalMCUnc -> SetName(CreateName(TString("unc_") + tag_resultlevel[resultcode] + "_" + tag_recolevel[recocode] + (shape ? "_shape" : "")));
  htotalMCUnc -> SetTitle(CreateTitle(TString("unc ") + tag_resultlevel[resultcode] + " " + tag_recolevel[recocode] + (shape ? " shape" : "")));
  // printf("final");
  // htotalMCUnc -> Print("all");
  // printf("normalised\n");
  printf("calculating unc test %p resultcode %u recocode %u shape %u\n", GetLevel(resultcode) -> GetHU(mo) -> GetTH1(recocode), resultcode, recocode, shape);
  //  getchar();
  return;
  TH1F * hnorm = (TH1F*)htotalMCUnc -> Clone();
  NormaliseToBinWidth(hnorm);
  //  hnorm -> Print("all");
  if (resultcode == OUT and recocode == GEN and not shape)
    {
      TH1F * htotalMCUncNorm = GetLevel(resultcode) -> GetHU(TOTALMC) -> Project(recocode, CreateName(TString("unc_norm_") + tag_resultlevel[resultcode] + "_" + tag_recolevel[recocode] + (shape ? "_shape" : "")));
      htotalMCUncNorm -> SetTitle(CreateTitle(TString("unc norm ") + tag_resultlevel[resultcode] + " " + tag_recolevel[recocode] + (shape ? " shape" : "")));
      htotalMCUncNorm -> Scale(1.0/htotalMCUncNorm -> Integral());
      TH1F * hsig_norm = GetLevel(resultcode) -> GetHU(SIGNALMO) -> Project(recocode, CreateName("sig_norm"));
      hsig_norm -> Scale(1.0/hsig_norm -> Integral());
      float sysUp[nbins + 2];
      float sysDown[nbins + 2];
      for (unsigned char ind = 0; ind < nbins + 2; ind ++)
	{
	  sysUp[ind] = 0.0;
	  sysDown[ind] = 0.0;
	}
      for (vector<HistoUnfolding *>::iterator it = GetLevel(resultcode) -> GetV(SYSMO, "MC13TeV_TTJets") -> begin(); it != GetLevel(resultcode) -> GetV(SYSMO, "MC13TeV_TTJets") -> end(); it ++)
	{
	  TH1F* hsys = (*it) -> Project(recocode);
	  hsys -> Scale(1.0/hsys -> Integral());
	  for (unsigned char bin_ind = 0; bin_ind < nbins + 2; bin_ind ++)
	    {
	      const float diff = hsys -> GetBinContent(bin_ind) - hsig_norm -> GetBinContent(bin_ind);
	      if (diff > 0)
		{
		  sysUp[bin_ind] = TMath::Sqrt(TMath::Power(sysUp[bin_ind], 2) + TMath::Power(diff, 2));
		}
	      else
		{
		  sysDown[bin_ind] = TMath::Sqrt(TMath::Power(sysDown[bin_ind], 2) + TMath::Power(diff, 2));
		}
	    }
	  delete hsys;
	}
      for (unsigned char bin_ind = 0; bin_ind < nbins + 2; bin_ind ++)
	{
	  htotalMCUncNorm -> SetBinContent(bin_ind, htotalMCUncNorm -> GetBinContent(bin_ind) + (sysUp[bin_ind] - sysDown[bin_ind])/2.0);
	  htotalMCUncNorm -> SetBinError(bin_ind, TMath::Sqrt(TMath::Power(htotalMCUncNorm -> GetBinError(bin_ind), 2) + TMath::Power((sysUp[bin_ind] + sysDown[bin_ind])/2.0, 2)));
	}
      delete hsig_norm;
      htotalMCUncNorm -> Scale(1.0/htotalMCUncNorm -> Integral());
      NormaliseToBinWidth(htotalMCUncNorm);
      htotalMCUncNorm -> Scale(1.0/htotalMCUncNorm -> Integral());


      TCanvas * coutput = (TCanvas *) gROOT -> GetListOfCanvases() -> FindObject(CreateName("coutput"));
      //      coutput -> GetListOfPrimitives() ->  ls();
      TIter next(coutput -> GetListOfPrimitives());
      bool legend_found = false;
      TObject * obj = nullptr;
      while (not legend_found and (obj = next()))
	{
	  if (obj -> InheritsFrom("TLegend"))
	    {
	      legend_found = true;
	    }
	}
      TLegend * legend = (TLegend *) obj;
      legend -> AddEntry(htotalMCUncNorm);
      coutput -> cd();
      htotalMCUncNorm -> SetLineColor(kRed);
      htotalMCUncNorm -> Draw("SAME");
      coutput -> Modified();
      coutput -> Update();
      coutput -> SaveAs(TString(_folder) + "/" + "coutput.png");
    }
}


void CompoundHistoUnfolding::Compareunc(ResultLevelCode_t = IN, RecoLevelCode_t = RECO, bool shape = false)
{
  using namespace TMath;
  printf("void CompoundHistoUnfolding::Compareunc(ResultLevelCode_t resultcode %u, RecoLevelCode_t recocode %u, bool shape %s)\n", resultcode, recocode, shape ? "shape" : "noshape");

  MOCode_t mo = shape ? TOTALMCUNCSHAPE : TOTALMCUNC;
  if (not GetLevel(resultcode) -> GetHURef(mo))
    GetLevel(resultcode) -> GetHURef(mo) = new HistoUnfoldingTH1();
  TH1 *& htotalMCUnc = GetLevel(resultcode) -> GetHU(mo) -> GetTH1Ref(recocode);
  htotalMCUnc = GetLevel(resultcode) -> GetHU(TOTALMCSIGNALPROXY, resultcode) -> Project(recocode, CreateName(shape ? "totalMCUncShape" : "totalMCUnc"), "", _YaxisTitle);
  //  RejectNonReco(htotalMCUnc);
  
  if (recocode == RECO and resultcode == IN)
    {
      ApplyScaleFactor(htotalMCUnc);
    }
  const int nbins = htotalMCUnc -> GetNbinsX();
  map<TString, vector<pair<SampleDescriptor*, float *>>> errors;
  // if (shape)
  //   {
  //     printf("_m2dirsyshistos.size() %lu  _m2dirsyshistos[signaltag].size() %lu _m1dirsyshistos[signaltag].size() %lu\n", 
  // 	     GetLevel(resultcode) -> _m2dirsyshistos.size(), 
  // 	     GetLevel(resultcode) -> _m2dirsyshistos[signaltag].size(),
  // 	     GetLevel(resultcode) -> _m1dirsyshistos[signaltag].size());
  //     getchar();
  //   }
  for (map<TString, vector<array<HistoUnfolding *, 2>>> :: iterator bit = GetLevel(resultcode) -> _m2dirsyshistos.begin(); bit != GetLevel(resultcode) -> _m2dirsyshistos.end(); bit ++)
    {
      TString sample = bit -> first;
      if (sample != signaltag)
	{
	  //continue;
	}
      for (vector<array<HistoUnfolding *, 2>>::iterator it =  bit -> second.begin(); it != bit -> second.end(); it ++)
	{
	  TH1 * hsigup   = GetSignalProxy(resultcode, recocode, sample.Data(), (*it)[0] -> GetSysType(), (*it)[0] -> GetTag() );
	  hsigup -> SetName(TString(hsigup -> GetName()) + "_up");
	  TH1 * hsigdown = GetSignalProxy(resultcode, recocode, sample.Data(), (*it)[1] -> GetSysType(), (*it)[1] -> GetTag() );
	  hsigdown -> SetName(TString(hsigdown -> GetName()) + "_down");
	  if (recocode == RECO and resultcode == IN)
	    {
	      ApplyScaleFactor(hsigup);
	      ApplyScaleFactor(hsigdown);
	    }
	  const double integralnominalup   = hsigup   -> Integral();
	  const double integralnominaldown = hsigdown -> Integral();
	  
	  HistoUnfolding * up     = (*it)[0];
	  
	  TH1 *            hup    = up -> Project(recocode, "up");
	  HistoUnfolding * down   = (*it)[1];
	  TH1 *            hdown  = down -> Project(recocode, "down");
	  TString tag = up -> GetTag();
	  tag.ReplaceAll("_up", "");
	  tag.ReplaceAll("m173v5", "topmass");
	  tag.ReplaceAll("m175v5", "topmass");
	  SampleDescriptor * sd = new SampleDescriptor(*(SampleDescriptor *) up);
	  sd -> SetTag(tag.Data());
	  sd -> SetCategory(up -> GetCategory());
	  // sd -> ls();
	  if (recocode == RECO and resultcode == IN)
	    {
	      ApplyScaleFactor(hup);
	      ApplyScaleFactor(hdown);
	    }
	  if (shape)
	    {
	      if (hup -> Integral())
		{
		  hup -> Scale(integralnominalup/hup -> Integral());
		}
	      else
		{
		  //	  printf("deleting %s\n", up -> GetTag());
		  delete   hup;
		  delete   hsigup;
		  hup    = nullptr;
		  hsigup = nullptr;
		}
	      if (hdown -> Integral())
		{
		  hdown -> Scale(integralnominaldown/hdown -> Integral());
		}
	      else
		{
		  //printf("deleting %s\n", down -> GetTag());
		  delete     hdown;
		  delete     hsigdown;
		  hdown    = nullptr;
		  hsigdown = nullptr;
		}
	    }
	  // hsig -> Print("all");
	  // hup -> Print("all");
	  // hdown -> Print("all");
	  if (not hsigdown or not hsigup)

	    continue;
	  auto cor = [&nbins] (TH1 * hsigup, TH1 * hsigdown, TH1 * hup, TH1 * hdown)
	    {
	      float cov = 0.0;
	      float sigmaup = 0.0;
	      float sigmadown = 0.0;
	      for (unsigned char bind = 1; bind < nbins + 1; bind ++)
		{
		  cov       += (hup -> GetBinContent(bind) - hsigup -> GetBinContent(bind)) * (hdown -> GetBinContent(bind) - hsigdown -> GetBinContent(bind));
		  sigmaup   += Power(hup ->GetBinContent(bind) - hsigup -> GetBinContent(bind), 2.0);
		  sigmadown += Power(hdown ->GetBinContent(bind) - hsigdown -> GetBinContent(bind), 2.0);
		}	    
	      return cov/Sqrt(sigmaup*sigmadown);
	    };

	  //printf("%s %f\n", (*it)[0] -> GetTag(), cor(hsigup, hsigdown, hup, hdown));
	  errors[sample].push_back(pair<SampleDescriptor*, float*>(sd, new THStack *));
	  for (unsigned char bind = 1; bind < nbins + 1; bind ++)
	    {
	      const double      sup   = hup -> GetBinContent(bind) - hsigup -> GetBinContent(bind);
	      const double      sdown = hdown -> GetBinContent(bind) - hsigdown -> GetBinContent(bind);
	      const double      diff   = Sqrt((Power(sup, 2) + Power(sdown, 2))/2.0);
	      //	      printf("%u %.9f %.9f\n", bind, sup, sdown); 
	      errors[sample].back() . second[bind - 1] = diff;
	    }
	  delete hup;
	  delete hdown;
	  delete hsigdown;
	  delete hsigup;
	}
    }

  for (map<TString, vector<HistoUnfolding *>> :: iterator bit = GetLevel(resultcode) -> _m1dirsyshistos.begin(); bit != GetLevel(resultcode) -> _m1dirsyshistos.end(); bit ++)
    {
      TString sample = bit -> first;
      if (sample != signaltag)
	{
	  //continue;
	}
      for (vector<HistoUnfolding *>::iterator it =  bit -> second.begin(); it != bit -> second.end(); it ++)
	{
	  if (TString((*it) -> GetCategory()) == "Colour flip")
	    continue;
	  // if (TString((*it) -> GetTag()) == "MC13TeV_TTJets2l2nu_amcatnlo")
	  //   continue;
	  TH1 * hsig = GetSignalProxy(resultcode, recocode, sample.Data(), (*it) -> GetSysType(), (*it) -> GetTag());
	  if (recocode == RECO and resultcode == IN)
	    {
	      ApplyScaleFactor(hsig);
	    }
	  const double integralnominal = hsig -> Integral();
	  if (not integralnominal)
	    continue;
	  HistoUnfolding * hu      = *it;
	  //hu -> ls();
	  TH1 *            hsys    = hu -> Project(recocode);


	  SampleDescriptor * sd    = new SampleDescriptor(*hu);
	  // printf("created SD\n");
	  // sd -> ls();
	  if (recocode == RECO and resultcode == IN)
	    {
	      ApplyScaleFactor(hsys);
	    }
	  if (shape and TString(hu -> GetTag()).Contains("non_clos"))
	    {
	      printf("nonclos sig unscaled\n");
	      hsig -> Print("all");
	      printf("nonclos sys unscaled\n");
	      hsys -> Print("all");
	      
	    }

	  if (shape)
	    {
	      hsys -> Scale(integralnominal/hsys -> Integral());
	    }
	  // if (shape and TString(hu -> GetTag()).Contains("non_clos"))
	  //   {
	  //     printf("%p\n", hu);
	  //     printf("nonclos signal\n");
	  //     hsig -> Print("all");
	  //     printf("nonclos sys\n");
	  //     hsys -> Print("all");
	  //     for (unsigned char bind = 1; bind< hsig -> GetNbinsX() + 1; bind ++)
	  // 	printf("%u %f\n", bind, hsys -> GetBinContent(bind) - hsig -> GetBinContent(bind));
	      
	  //   }

	  errors[sample].push_back(pair<SampleDescriptor*, float*>(sd, new float[nbins]));
	  for (unsigned char bind = 1; bind < nbins + 1; bind ++)
	    {
	      const double      diff   = hsys -> GetBinContent(bind) - hsig -> GetBinContent(bind); 
	      errors[sample].back() . second[bind - 1] = diff;
	    }
	  delete hsys;
	  delete hsig;
	}
    }
  for (map<TString, vector<pair<SampleDescriptor*, float *>>> ::iterator bit = errors.begin(); bit != errors.end(); bit ++)
    {
      TString sample = bit -> first;
      for(vector<pair<SampleDescriptor*, float *>>::iterator it = bit -> second.begin(); it != bit -> second.end(); it ++)
	{
	  //	  printf("%s %s\n", it -> first -> GetTag(), it -> first -> GetCategory());
	  for (unsigned char bind = 0; bind < nbins; bind ++)
	    {
	      //     printf("[%f] ", it -> second[bind]);
	    }
	  //printf("\n\n");
	}
    }

  // SampleDescriptor * statsd = new SampleDescriptor;
  // statsd -> SetTag("statistics");
  // statsd -> SetCategory("statistics");
  // errors[signaltag].push_back(pair<SampleDescriptor *, float *>(statsd, new float[nbins]));
  float * statistics = new float[nbins];
  for (unsigned char bind = 1; bind < nbins + 1; bind ++)
    {
      statistics[bind - 1] = htotalMCUnc -> GetBinError(bind);
    }
  map<TString, float *> errcat;
  for (map<TString, vector<pair<SampleDescriptor*, float *>>> ::iterator bit = errors.begin(); bit != errors.end(); bit ++)
    {
      TString sample = bit -> first;
      for(vector<pair<SampleDescriptor*, float *>>::iterator it = bit -> second.begin(); it != bit -> second.end(); it ++)
	{
	  const char * category = it -> first -> GetCategory();
	  map<TString, float *> :: iterator errit = errcat.find(category);
	  if (errit == errcat.end())
	    {
	      errcat[category] = new float[nbins];
	      for (unsigned char bind = 0; bind < nbins; bind ++)
		{
		  errcat[category][bind] = fabs(it -> second[bind]);
		}
	    }
	  else
	    {
	      for (unsigned char bind = 0; bind < nbins; bind ++)
		{
		  errcat[category][bind] = Sqrt(Power(errcat[category][bind], 2) + Power(it -> second[bind], 2));
		}	      
	    }
	}
    }
  for (unsigned char bind = 0; bind < nbins; bind ++)
    {
      errcat["Top mass"][bind] *= 1.0/Sqrt(3);
    }	      

  // printf("\n Categories \n");
  const unsigned char msize = errcat.size();
  pair<TString, float *> * errcatarr = new pair<TString, float *>[msize];
  unsigned char pind = 0;
  for (map<TString, float *>::iterator it1 = errcat.begin(); it1 != errcat.end(); it1 ++)
    {
      errcatarr[pind] = *it1;
      pind ++;
    }
  auto swap = [](pair<TString, float *> * it1, pair<TString, float *> * it2)
    {
      pair<TString, float *> itswap = * it1;
      *it1 = *it2;
      *it2 = itswap;
    };
  auto sum = [&nbins] (pair<TString, float *> * it) -> float
    {
      float sumf = 0.0;
      for (unsigned char bind = 0; bind < nbins; bind ++)
	{
	  sumf += it -> second[bind];
	}
      return sumf;
    };
  for (unsigned char ind1 = 0; ind1 < msize - 1; ind1 ++)
    {
      
      for (unsigned char ind2 = ind1 + 1; ind2 < msize; ind2 ++)
	{
	  if (sum(errcatarr + ind2) > sum(errcatarr + ind1))
	    swap(errcatarr + ind1 , errcatarr + ind2);
	}

    }
  TH1 * hsigtest =  GetLevel(resultcode) -> GetHU(SIGNALPROXY, resultcode) -> Project(recocode, CreateName("sig"));

  if (shape)
    {
      for(unsigned char ind = 0; ind < msize; ind ++)
	{
	  pair<TString, float*> * it = errcatarr + ind;
	  printf("%s\n", it -> first.Data());
	  for (unsigned char bind = 0; bind < nbins; bind ++)
	    {
	      printf("[%.2f] ", it -> second[bind]/htotalMCUnc -> GetBinContent(bind + 1)*100.0);
	    }
	  printf("\n");
	}
      printf("\n");
    }
  float * errf = new float[nbins];
  for (unsigned char bind = 0; bind < nbins; bind ++)
    {
      errf[bind] = 0.0;
    }

  for(map<TString, float *>::iterator it = errcat.begin(); it != errcat.end(); it ++)
    {
      for (unsigned char bind = 0; bind < nbins; bind ++)
	{
	  errf[bind] = Sqrt(Power(errf[bind], 2) + Power(it -> second[bind],2));
	}
    }
  printf("\n-----------------------------------------\n");
  // printf("signal\n");
  // hsigtest -> Print("all");

  printf("Total syst errror\n");
  for (unsigned char bind = 0; bind < nbins; bind ++)
    {
      printf("[%.2f] ", errf[bind]/htotalMCUnc -> GetBinContent(bind + 1)*100.0);
    }
  printf("\n");
  printf("Stat error\n");
 
  for (unsigned char bind = 0; bind < nbins; bind ++)
    {
      printf("[%.2f] ", hsigtest -> GetBinError(bind + 1)*100.0/htotalMCUnc -> GetBinContent(bind + 1));
    }
  printf("\n------------------------------------------\n");
  printf("Total error\n");
  for (unsigned char bind = 0; bind < nbins; bind ++)
    {
      htotalMCUnc -> SetBinError(bind + 1, Sqrt(Power(htotalMCUnc -> GetBinError(bind + 1), 2) + Power(errf[bind],2)));
      printf("[%.2f] ", htotalMCUnc -> GetBinError(bind + 1)*100.0/htotalMCUnc -> GetBinContent(bind + 1));
    }
  printf("\n");
  if (shape and recocode == GEN and resultcode == OUT)
    {
      FILE * file = fopen((string(_folder) + "/systematics.txt").c_str(), "w");
      fprintf(file, "\\begin{table}[htbp]\n");
      fprintf(file, "\t\\centering\n");
      fprintf(file, "\t\\begin{tabular}{l");
      for (unsigned char bind = 1; bind < htotalMCUnc -> GetNbinsX() + 1; bind ++)
	{
	  fprintf(file, "c");
	}
      fprintf(file, "}\n");
      fprintf(file, "\t\t\\hline\n");
      for (unsigned char bind = 1; bind < htotalMCUnc -> GetNbinsX() + 1; bind ++)
	{
	  fprintf(file, "\t\t & %.2f \\textendash\\ %.2f", htotalMCUnc -> GetBinLowEdge(bind), htotalMCUnc -> GetXaxis() -> GetBinUpEdge(bind));
	}
      fprintf(file, "\\\\\n");
      fprintf(file, "\t\t\\hline\n");
      for(unsigned char ind = 0; ind < msize; ind ++)
	{
	  pair<TString, float*> * it = errcatarr + ind;
	  fprintf(file, "\t\t%s ", it -> first.Data());
	  for (unsigned char bind = 1; bind < nbins + 1; bind ++)
	    {
	      fprintf(file, "\t & %.2f ", it -> second[bind - 1]/htotalMCUnc -> GetBinContent(bind) * 100.0);
	    }
	  fprintf(file, "\\\\\n");
	}
      fprintf(file, "\t\t\\hline\n");
      fprintf(file, "\t\tTotal syst errror");
      for (unsigned char bind = 0; bind < nbins; bind ++)
	{
	  fprintf(file, " & %.2f ", errf[bind]/htotalMCUnc -> GetBinContent(bind + 1)*100.0);
	}
      fprintf(file, "\\\\\n\t\t\\hline\n");
      fprintf(file, "\t\tStatistics");
 
      for (unsigned char bind = 0; bind < nbins; bind ++)
	{
	  fprintf(file, "\t & %.2f ", hsigtest -> GetBinError(bind + 1)*100.0/htotalMCUnc -> GetBinContent(bind + 1));
	}
      fprintf(file, "\t\t\\\\\n\t\t\\hline\n");
      fprintf(file, "\t\tTotal error");
      for (unsigned char bind = 0; bind < nbins; bind ++)
	{
	  fprintf(file, "\t & %.2f ", htotalMCUnc -> GetBinError(bind + 1)*100.0/htotalMCUnc -> GetBinContent(bind + 1));
	}
      fprintf(file, "\t\t\\\\\n\t\t\\hline\n");
      fprintf(file, "\t\\end{tabular}\n");
      fprintf(file, "\t\\caption{Statistical uncertainties}\n");
      fprintf(file, "\t\\label{tab:statunc}\n");
      fprintf(file, "\\end{table}\n");
      fclose(file);
    }
  delete hsigtest;

  delete [] errf;
  delete [] errcatarr;
  for (map<TString, vector<pair<SampleDescriptor*, float *>>> ::iterator bit = errors.begin(); bit != errors.end(); bit ++)
    {
      TString sample = bit -> first;
      for(vector<pair<SampleDescriptor*, float *>>::iterator it = bit -> second.begin(); it != bit -> second.end(); it ++)
	{
	  delete    it -> first;
	  delete [] it -> second;
	}
    }

  for(map<TString, float *>::iterator it = errcat.begin(); it != errcat.end(); it ++)
    {
      delete [] it -> second; 
    }


}
